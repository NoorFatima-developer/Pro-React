https://dev.to/frontendengineer/10-reactjs-coding-exercises-with-codepen-exercise-and-solution--22k7

Timer in js...
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Countdown Timer</title>
  <style>
    body {
      font-family: sans-serif;
      text-align: center;
      margin-top: 50px;
    }
    #timer {
      font-size: 48px;
      margin: 20px 0;
    }
  </style>
</head>
<body>

  <h1>‚è∞ Countdown Timer</h1>

  <div id="timer">--</div>

  <button onclick="startTimer(10)">Start 10s Timer</button>

  <script src="script.js"></script>
</body>
</html>



function startTimer(durationInSeconds) {
  let timeLeft = durationInSeconds;

  const timerElement = document.getElementById("timer");
  timerElement.textContent = `${timeLeft}s`;

  const timerInterval = setInterval(() => {
    timeLeft--;
    timerElement.textContent = `${timeLeft}s`;

    if (timeLeft <= 0) {
      clearInterval(timerInterval);
      timerElement.textContent = "‚è∞ Time's up!";
    }
  }, 1000); // every 1 second
}


using react with material UI 

// src/components/Timer.js
import React, { useState, useEffect } from 'react';
import {
  Card,
  CardContent,
  Typography,
  Button,
  Box
} from '@mui/material';

const Timer = () => {
  const [timeLeft, setTimeLeft] = useState(null);
  const [isRunning, setIsRunning] = useState(false);

  useEffect(() => {
    let interval;
    if (isRunning && timeLeft > 0) {
      interval = setInterval(() => {
        setTimeLeft((prev) => prev - 1);
      }, 1000);
    } else if (timeLeft === 0) {
      clearInterval(interval);
      setIsRunning(false);
    }

    return () => clearInterval(interval);
  }, [isRunning, timeLeft]);

  const handleStart = () => {
    setTimeLeft(10); // start from 10 seconds
    setIsRunning(true);
  };

  return (
    <Box sx={{ display: 'flex', justifyContent: 'center', mt: 10 }}>
      <Card sx={{ minWidth: 300, padding: 3 }}>
        <CardContent>
          <Typography variant="h4" gutterBottom textAlign="center">
            ‚è≥ Countdown Timer
          </Typography>

          <Typography variant="h2" align="center" color="primary" gutterBottom>
            {timeLeft === null ? '--' : timeLeft === 0 ? "‚è∞ Time's up!" : `${timeLeft}s`}
          </Typography>

          <Box display="flex" justifyContent="center" mt={2}>
            <Button
              variant="contained"
              color="primary"
              onClick={handleStart}
              disabled={isRunning}
            >
              Start Timer
            </Button>
          </Box>
        </CardContent>
      </Card>
    </Box>
  );
};

export default Timer;

// src/App.js
import React from 'react';
import Timer from './components/Timer';

function App() {
  return (
    <div>
      <Timer />
    </div>
  );
}

export default App;





==========Cart using context API...
/ CartContext.js
import React, { createContext, useState, useContext } from 'react';

// Create the context
const CartContext = createContext();

// Create the context provider component
export const CartProvider = ({ children }) => {
  const [items, setItems] = useState([]);

  // Add item to cart
  const addToCart = (product) => {
    setItems(prevItems => {
      // Check if item already exists in cart
      const existingItem = prevItems.find(item => item.id === product.id);
      
      if (existingItem) {
        // Increase quantity if item exists
        return prevItems.map(item => 
          item.id === product.id 
            ? { ...item, quantity: item.quantity + 1 } 
            : item
        );
      } else {
        // Add new item with quantity 1
        return [...prevItems, { ...product, quantity: 1 }];
      }
    });
  };

  // Remove item from cart
  const removeFromCart = (productId) => {
    setItems(prevItems => prevItems.filter(item => item.id !== productId));
  };

  // Clear cart
  const clearCart = () => {
    setItems([]);
  };

  // Calculate total price
  const getTotalPrice = () => {
    return items.reduce((total, item) => total + (item.price * item.quantity), 0);
  };

  // Values to be provided to consumers
  const cartContextValue = {
    items,
    addToCart,
    removeFromCart,
    clearCart,
    getTotalPrice
  };

  return (
    <CartContext.Provider value={cartContextValue}>
      {children}
    </CartContext.Provider>
  );
};

// Custom hook for using the cart context
export const useCart = () => {
  const context = useContext(CartContext);
  if (!context) {
    throw new Error('useCart must be used within a CartProvider');
  }
  return context;
};


// components/Header.js
import React from 'react';
import { useCart } from '../CartContext';

const Header = () => {
  const { items } = useCart();
  
  const totalItems = items.reduce((total, item) => total + item.quantity, 0);
  
  return (
    <header>
      <h1>Shopping App</h1>
      <div className="cart-icon">
        üõí <span>{totalItems}</span>
      </div>
    </header>
  );
};

export default Header;


// components/ProductList.js
import React from 'react';
import ProductItem from './ProductItem';

const ProductList = () => {
  // Sample products data (in a real app, this might come from an API)
  const products = [
    { id: 1, name: 'Product 1', price: 10 },
    { id: 2, name: 'Product 2', price: 20 },
    { id: 3, name: 'Product 3', price: 30 },
  ];
  
  return (
    <div className="product-list">
      <h2>Products</h2>
      {products.map(product => (
        <ProductItem key={product.id} product={product} />
      ))}
    </div>
  );
};

export default ProductList;


// components/ProductItem.js
import React from 'react';
import { useCart } from '../CartContext';

const ProductItem = ({ product }) => {
  const { addToCart } = useCart();
  
  return (
    <div className="product">
      <h3>{product.name}</h3>
      <p>${product.price}</p>
      <button onClick={() => addToCart(product)}>Add to Cart</button>
    </div>
  );
};

export default ProductItem;

// components/Cart.js
import React from 'react';
import { useCart } from '../CartContext';

const Cart = () => {
  const { items, removeFromCart, getTotalPrice, clearCart } = useCart();
  
  return (
    <div className="cart">
      <h2>Your Cart</h2>
      {items.length === 0 ? (
        <p>Your cart is empty</p>
      ) : (
        <>
          {items.map(item => (
            <div key={item.id} className="cart-item">
              <span>{item.name} x {item.quantity}</span>
              <span>${item.price * item.quantity}</span>
              <button onClick={() => removeFromCart(item.id)}>Remove</button>
            </div>
          ))}
          <div className="cart-total">
            <strong>Total: ${getTotalPrice()}</strong>
          </div>
          <button onClick={clearCart}>Clear Cart</button>
        </>
      )}
    </div>
  );
};

export default Cart;


// App.js
import React from 'react';
import { CartProvider } from './CartContext';
import Header from './components/Header';
import ProductList from './components/ProductList';
import Cart from './components/Cart';

const App = () => {
  return (
    <CartProvider>
      <div className="app">
        <Header />
        <ProductList />
        <Cart />
      </div>
    </CartProvider>
  );
};

export default App;


src/
‚îú‚îÄ‚îÄ CartContext.js        // Contains context creation and provider
‚îú‚îÄ‚îÄ App.js                // Main component that wraps everything with CartProvider
‚îî‚îÄ‚îÄ components/
    ‚îú‚îÄ‚îÄ Header.js         // Shows cart item count
    ‚îú‚îÄ‚îÄ ProductList.js    // Lists all products
    ‚îú‚îÄ‚îÄ ProductItem.js    // Individual product with "Add to Cart" button
    ‚îî‚îÄ‚îÄ Cart.js           // Shows cart contents and total


=====Scenario 2: useMemo and useCallback Example


// components/ItemList.js
import React from 'react';

// Using React.memo to prevent re-rendering when props haven't changed
const ItemList = React.memo(({ items }) => {
  console.log('ItemList rendered');
  
  return (
    <div className="items-container">
      <h3>Items ({items.length})</h3>
      {items.length > 0 ? (
        <ul className="items-list">
          {items.slice(0, 20).map(item => (
            <li key={item.id}>
              {item.name} - Category: {item.category} - ${item.price}
            </li>
          ))}
          {items.length > 20 && <li>...and {items.length - 20} more items</li>}
        </ul>
      ) : (
        <p>No items match your filters</p>
      )}
    </div>
  );
});

export default ItemList;



// ExpensiveItemsList.js
import React, { useState, useMemo, useCallback } from 'react';
import ItemList from './components/ItemList';

const ExpensiveItemsList = () => {
  console.log('ExpensiveItemsList component rendered');
  
  // Sample large dataset
  const initialItems = Array.from({ length: 1000 }, (_, index) => ({
    id: index,
    name: `Item ${index}`,
    category: index % 5 === 0 ? 'A' : index % 3 === 0 ? 'B' : 'C',
    price: Math.floor(Math.random() * 100) + 1
  }));

  // State for items and filters
  const [items] = useState(initialItems);
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [minPrice, setMinPrice] = useState(0);
  const [count, setCount] = useState(0); // Unrelated state to demonstrate re-renders

  // Using useMemo to avoid expensive recalculations when unrelated state changes
  const filteredItems = useMemo(() => {
    console.log('Filtering items - expensive calculation');
    
    return items.filter(item => {
      // Filter by category
      if (selectedCategory !== 'all' && item.category !== selectedCategory) {
        return false;
      }
      
      // Filter by minimum price
      if (item.price < minPrice) {
        return false;
      }
      
      return true;
    });
  }, [items, selectedCategory, minPrice]); // Only recalculate when these dependencies change
  
  // Memoize the statistics calculation
  const statistics = useMemo(() => {
    console.log('Calculating statistics');
    
    const total = filteredItems.reduce((sum, item) => sum + item.price, 0);
    const average = total / filteredItems.length || 0;
    
    return {
      count: filteredItems.length,
      total: total.toFixed(2),
      average: average.toFixed(2)
    };
  }, [filteredItems]); // Only recalculate when filteredItems changes
  
  // Memoize event handlers with useCallback to prevent unnecessary re-renders of child components
  const handleCategoryChange = useCallback((e) => {
    setSelectedCategory(e.target.value);
  }, []);
  
  const handleMinPriceChange = useCallback((e) => {
    setMinPrice(Number(e.target.value));
  }, []);
  
  const incrementCount = useCallback(() => {
    setCount(prevCount => prevCount + 1);
  }, []);
  
  return (
    <div className="expensive-list">
      <div className="filters">
        <div>
          <label>Category:</label>
          <select value={selectedCategory} onChange={handleCategoryChange}>
            <option value="all">All</option>
            <option value="A">Category A</option>
            <option value="B">Category B</option>
            <option value="C">Category C</option>
          </select>
        </div>
        
        <div>
          <label>Min Price: ${minPrice}</label>
          <input 
            type="range" 
            min="0" 
            max="100" 
            value={minPrice} 
            onChange={handleMinPriceChange} 
          />
        </div>
        
        <div>
          <button onClick={incrementCount}>
            Unrelated Counter: {count}
          </button>
          <p><small>(This demonstrates that clicking this won't trigger expensive recalculations)</small></p>
        </div>
      </div>
      
      <div className="statistics">
        <h3>Statistics</h3>
        <p>Items: {statistics.count}</p>
        <p>Total: ${statistics.total}</p>
        <p>Average Price: ${statistics.average}</p>
      </div>
      
      <ItemList items={filteredItems} />
    </div>
  );
};

export default ExpensiveItemsList;

src/
‚îú‚îÄ‚îÄ ExpensiveItemsList.js     // Main component with optimization
‚îî‚îÄ‚îÄ components/
    ‚îî‚îÄ‚îÄ ItemList.js           // Optimized child component with React.memo

